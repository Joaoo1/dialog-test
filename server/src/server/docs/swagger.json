{
	"openapi": "3.0.0",
	"info": {
		"title": "Feed Backend API",
		"version": "1.0.0",
		"description": "API documentation for the Feed Backend."
	},
	"servers": [
		{
			"url": "https://api-dialog.utamo.com.br"
		},
		{
			"url": "http://localhost:5555"
		}
	],
	"components": {
		"securitySchemes": {
			"bearerAuth": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	},
	"paths": {
		"/api/auth/sign-in": {
			"post": {
				"summary": "Authenticate a user",
				"description": "Authenticates a user and returns a JWT token.",
				"tags": ["Authentication"],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"email": {
										"type": "string",
										"format": "email",
										"example": "user@example.com",
										"description": "The user's email address."
									},
									"password": {
										"type": "string",
										"format": "password",
										"example": "123456",
										"description": "The user's password."
									}
								},
								"required": ["email", "password"]
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful authentication.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"token": {
											"type": "string",
											"example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
											"description": "The JWT token for the authenticated user."
										},
										"user": {
											"type": "object",
											"properties": {
												"id": {
													"type": "string",
													"example": "12345",
													"description": "The user's unique identifier."
												},
												"email": {
													"type": "string",
													"example": "user@example.com",
													"description": "The user's email address."
												}
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Invalid request (e.g., missing or invalid fields)."
					},
					"401": {
						"description": "Authentication failed (e.g., invalid credentials)."
					},
					"429": {
						"description": "Too many requests (rate limit exceeded)."
					}
				}
			}
		},
		"/api/auth/sign-up": {
			"post": {
				"summary": "Create a new user",
				"description": "Creates a new user and returns the created user data.",
				"tags": ["Authentication"],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"email": {
										"type": "string",
										"format": "email",
										"example": "newuser@example.com",
										"description": "The new user's email address."
									},
									"password": {
										"type": "string",
										"format": "password",
										"example": "password123",
										"description": "The new user's password."
									},
									"name": {
										"type": "string",
										"example": "John Doe",
										"description": "The new user's name."
									}
								},
								"required": ["email", "password", "name"]
							}
						}
					}
				},
				"responses": {
						"201": {
						"description": "User successfully created.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"user": {
											"type": "object",
											"properties": {
												"id": {
													"type": "string",
													"example": "67890",
													"description": "The new user's unique identifier."
												},
												"email": {
													"type": "string",
													"example": "newuser@example.com",
													"description": "The new user's email address."
												},
												"name": {
													"type": "string",
													"example": "John Doe",
													"description": "The new user's name."
												}
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Invalid request (e.g., missing or invalid fields)."
					},
					"409": {
						"description": "Conflict (e.g., user already exists)."
					},
					"429": {
						"description": "Too many requests (rate limit exceeded)."
					}
				}
			}
		},
		"/api/users": {
			"get": {
				"tags": ["Users"],
				"summary": "Get current user",
				"description": "Returns the authenticated user's profile.",
				"security": [
				  {
					"bearerAuth": []
				  }
				],
				"responses": {
				  "200": {
					"description": "User profile returned successfully",
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"user": {
										"type": "object",
										"properties": {
											"id": {
												"type": "string",
												"example": "12345",
												"description": "The unique identifier of the user."
											},
											"email": {
												"type": "string",
												"example": "updateduser@example.com",
												"description": "The updated email address of the user."
											},
											"name": {
												"type": "string",
												"example": "Updated Name",
												"description": "The updated name of the user."
											},
											"createdAt": {
												"type": "string",
												"format": "date-time",
												"example": "2023-10-01T12:00:00Z",
												"description": "The date and time when the user was created."
											}
										}
									}
								}
							}
						}
					}
				  },
				  "401": {
					"description": "Unauthorized"
				  },
				  "404": {
					"description": "User not found"
				  }
				}
			  },
			"put": {
				"summary": "Update an existing user",
				"description": "Updates an existing user's details.",
				"tags": ["Users"],
				"security": [
					{
						"bearerAuth": []
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"email": {
										"type": "string",
										"format": "email",
										"example": "updateduser@example.com",
										"description": "The updated email address of the user."
									},
									"name": {
										"type": "string",
										"example": "Updated Name",
										"description": "The updated name of the user."
									},
									"currentPassword": {
										"type": "string",
										"format": "password",
										"example": "oldPassword123",
										"description": "The user's current password (required to change password)."
									},
									"password": {
										"type": "string",
										"format": "password",
										"example": "NewPassword123",
										"description": "The new password for the user."
									}
								},
								"required": []
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "User successfully updated.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"user": {
											"type": "object",
											"properties": {
												"id": {
													"type": "string",
													"example": "12345",
													"description": "The unique identifier of the user."
												},
												"email": {
													"type": "string",
													"example": "updateduser@example.com",
													"description": "The updated email address of the user."
												},
												"name": {
													"type": "string",
													"example": "Updated Name",
													"description": "The updated name of the user."
												},
												"createdAt": {
													"type": "string",
													"format": "date-time",
													"example": "2023-10-01T12:00:00Z",
													"description": "The date and time when the user was created."
												}
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Invalid request (e.g., missing or invalid fields)."
					},
					"404": {
						"description": "User not found."
					},
					"409": {
						"description": "Conflict (e.g., email already in use)."
					},
					"429": {
						"description": "Too many requests (rate limit exceeded)."
					}
				}
			},
			"delete": {
				"summary": "Delete the authenticated user",
				"description": "Deletes the currently authenticated user.",
				"tags": ["Users"],
				"security": [
					{
						"bearerAuth": []
					}
				],
				"responses": {
					"204": {
						"description": "User successfully deleted."
					},
					"401": {
						"description": "Unauthorized (e.g., invalid or missing token)."
					},
					"429": {
						"description": "Too many requests (rate limit exceeded)."
					}
				}
			}
		},
		"/api/posts": {
			"get": {
				"summary": "List all posts",
				"tags": ["Posts"],
				"parameters": [
					{
						"name": "search",
						"in": "query",
						"required": false,
						"schema": { "type": "string" },
						"description": "Search term to filter posts by content (accent-insensitive)."
					}
				],
				"responses": {
					"200": {
						"description": "Posts list",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"id": { "type": "string" },
											"text": { "type": "string" },
											"createdAt": { "type": "string", "format": "date-time" },
											"createdBy": { "type": "string", "format": "uuid" },
											"authorName": { "type": "string" },
											"likesCount": { "type": "integer" },
											"likedByUser": { "type": "boolean" }
										}
									}
								}
							}
						}
					}
				}
			},
			"post": {
				"summary": "Create a new post",
				"tags": ["Posts"],
				"security": [{ "bearerAuth": [] }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"text": { "type": "string" }
								},
								"required": ["text"]
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Post created",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"id": { "type": "string" },
										"text": { "type": "string" },
										"createdBy": { "type": "string", "format": "uuid" },
										"createdAt": { "type": "string", "format": "date-time" }
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/posts/{id}": {
			"delete": {
				"summary": "Delete a post",
				"tags": ["Posts"],
				"security": [{ "bearerAuth": [] }],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": { "type": "string", "format": "uuid" }
					}
				],
				"responses": {
					"204": {
						"description": "Post deleted"
					}
				}
			}
		},
		"/api/posts/{postId}/like": {
			"post": {
				"summary": "Toggle like on a post",
				"tags": ["Posts"],
				"security": [{ "bearerAuth": [] }],
				"parameters": [
					{
						"name": "postId",
						"in": "path",
						"required": true,
						"schema": { "type": "string", "format": "uuid" }
					}
				],
				"responses": {
					"200": {
						"description": "Like toggled"
					}
				}
			}
		}
	}
}
